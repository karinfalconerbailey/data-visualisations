!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r(require("apache-arrow")):"function"==typeof define&&define.amd?define(["apache-arrow"],r):((e="undefined"!=typeof globalThis?globalThis:e||self).vega=e.vega||{},e.vega.format=e.vega.format||{},e.vega.format.arrow=r(e.Arrow))}(this,(function(e){"use strict";const r=Symbol("rowIndex");function t(t){const n=function(r){if(r instanceof e.Table)return r;r instanceof ArrayBuffer&&(r=new Uint8Array(r));return e.Table.from(Array.isArray(r)?r:[r])}(t),o=function(e){const t=e.schema.fields.map((e=>e.name)),n={};return t.forEach(((t,o)=>{const a=e.getColumnAt(o);n.hasOwnProperty(t)||Object.defineProperty(n,t,{get:function(){return a.get(this[r])},set:function(){throw Error("Arrow field values can not be overwritten.")},enumerable:!0})})),e=>{const t=Object.create(n);return t[r]=e,t}}(n),a=Array(n.length);for(let e=0,r=a.length;e<r;++e)a[e]=o(e);return a}return t.responseType="arrayBuffer",t}));